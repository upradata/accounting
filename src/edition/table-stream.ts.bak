'use strict';

import { Transform } from 'stream';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.default = void 0;

let _lodash = _interopRequireDefault(require('lodash'));

let _makeStreamConfig = _interopRequireDefault(require('table/dist/makeStreamConfig'));

let _drawRow = _interopRequireDefault(require('table/dist/drawRow'));

let _drawBorder = require('table/dist/drawBorder');

let _stringifyTableData = _interopRequireDefault(require('table/dist/stringifyTableData'));

let _truncateTableData = _interopRequireDefault(require('table/dist/truncateTableData'));

let _mapDataUsingRowHeightIndex = _interopRequireDefault(require('table/dist/mapDataUsingRowHeightIndex'));

let _alignTableData = _interopRequireDefault(require('table/dist/alignTableData'));

let _padTableData = _interopRequireDefault(require('table/dist/padTableData'));

let _calculateRowHeightIndex = _interopRequireDefault(require('table/dist/calculateRowHeightIndex'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {Array} data
 * @param {Object} config
 * @returns {Array}
 */
const prepareData = (data, config) => {
    let rows;
    rows = (0, _stringifyTableData.default)(data);
    rows = (0, _truncateTableData.default)(data, config);
    const rowHeightIndex = (0, _calculateRowHeightIndex.default)(rows, config);
    rows = (0, _mapDataUsingRowHeightIndex.default)(rows, rowHeightIndex, config);
    rows = (0, _alignTableData.default)(rows, config);
    rows = (0, _padTableData.default)(rows, config);
    return rows;
};
/**
 * @param {string[]} row
 * @param {number[]} columnWidthIndex
 * @param {Object} config
 * @returns {undefined}
 */


const create = (row, columnWidthIndex, config) => {
    const rows = prepareData([ row ], config);
    const body = rows.map(literalRow => {
        return (0, _drawRow.default)(literalRow, config.border);
    }).join('');
    let output;
    output = '';
    output += (0, _drawBorder.drawBorderTop)(columnWidthIndex, config.border);
    output += body;
    output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);
    output = _lodash.default.trimEnd(output);
    return output;
    // config.logger.write(output);
};
/**
 * @param {string[]} row
 * @param {number[]} columnWidthIndex
 * @param {Object} config
 * @returns {undefined}
 */


const append = (row, columnWidthIndex, config) => {
    const rows = prepareData([ row ], config);
    const body = rows.map(literalRow => {
        return (0, _drawRow.default)(literalRow, config.border);
    }).join('');
    let output;
    output = '\r\u001B[K';
    output += (0, _drawBorder.drawBorderJoin)(columnWidthIndex, config.border);
    output += body;
    output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);
    output = _lodash.default.trimEnd(output);
    return output;
    // config.logger.write(output);
};
/**
 * @param {Object} userConfig
 * @returns {Object}
 */


const createStream = (userConfig = {}) => {
    const config = (0, _makeStreamConfig.default)(userConfig); // @todo Use 'Object.values' when Node.js v6 support is dropped.

    const columnWidthIndex = _lodash.default.values(_lodash.default.mapValues(config.columns, column => {
        return column.width + column.paddingLeft + column.paddingRight;
    }));

    let empty;
    empty = true;
    return new Transform({
        /**
         * @param {string[]} row
         * @returns {undefined}
         */
        transform: (row, encoding, callback) => {
            if (row.length !== config.columnCount) {
                throw new Error('Row cell count does not match the config.columnCount.');
            }

            if (empty) {
                empty = false;
                this.push(create(row, columnWidthIndex, config));
            } else {
                this.push(append(row, columnWidthIndex, config));
            }

            callback();
        }
    });
};

let _default = createStream;
exports.default = _default;
// # sourceMappingURL=createStream.js.map
